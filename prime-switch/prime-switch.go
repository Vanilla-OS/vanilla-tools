package main

/*	License: GPLv3
	Authors:
		Mirko Brombin <mirko@fabricators.ltd>
		Vanilla OS Contributors <https://github.com/vanilla-os/>
	Copyright: 2023
	Description:
		This program switches PRIME profiles on a Debian+ABRoot based system.
*/

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
)

const (
	powerProfilePath    = "/etc/prime-discrete"
	blacklistFile       = "/etc/modprobe.d/blacklist-nvidia.conf"
	nvidiaKMSFile       = "/etc/modprobe.d/nvidia-kms.conf"
	nvidiaRuntimePMFile = "/etc/modprobe.d/nvidia-runtimepm.conf"
)

func getProfile() string {
	content, err := os.ReadFile(powerProfilePath)
	if err != nil {
		return "unknown"
	}

	config := strings.TrimSpace(string(content))
	switch config {
	case "on":
		return "nvidia"
	case "on-demand":
		return "on-demand"
	default:
		return "integrated"
	}
}

func printProfile() {
	profile := getProfile()
	if profile == "unknown" {
		log.Fatal("Error: no profile can be found")
	}

	fmt.Println(profile)
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("Usage: prime-switch <command>")
	}

	command := os.Args[1]

	switch command {
	case "integrated", "nvidia", "on-demand":
		enableProfile(command)
	case "query":
		printProfile()
	default:
		log.Fatalf("Invalid command: %s\nUsage: prime-switch integrated|nvidia|on-demand|query", command)
	}
}

func enableProfile(profile string) {
	nvPowerMode := "off"

	switch profile {
	case "nvidia":
		nvPowerMode = "on"
		enableNvidiaProfile()
	case "on-demand":
		nvPowerMode = "on-demand"
		enableOnDemandProfile()
	case "integrated":
		nvPowerMode = "off"
		enableIntegratedProfile()
	default:
		log.Fatalf("Invalid profile: %s", profile)
	}

	if err := os.WriteFile(powerProfilePath, []byte(nvPowerMode), 0644); err != nil {
		log.Fatalf("Error writing profile to config file: %s", err)
	}

	fmt.Printf("Profile set to: %s\n", profile)
}

func enableNvidiaProfile() {
	disableRuntimePM()
	unlinkIfExists(blacklistFile)
	updateABRootInitramfs()
}

func enableOnDemandProfile() {
	if isLaptop() && supportsRuntimePM() {
		enableRuntimePM()
	}
	enableKMS()
	disableNvidia(false)
	updateABRootInitramfs()
}

func enableIntegratedProfile() {
	disableNvidia(true)
	updateABRootInitramfs()
}

func unlinkIfExists(path string) {
	if _, err := os.Stat(path); err == nil {
		if err := os.Remove(path); err != nil {
			log.Printf("Error removing %s: %s\n", path, err)
		}
	}
}

func updateABRootInitramfs() {
	fmt.Println("Updating the initramfs. Please wait for the operation to complete:")
	cmd := exec.Command("abroot", "update-initramfs")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Run(); err != nil {
		log.Fatalf("Error updating initramfs: %s", err)
	}

	fmt.Println("Done")
}

func isLaptop() bool {
	path := "/sys/devices/virtual/dmi/id/chassis_type"
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return false
	}

	content, err := os.ReadFile(path)
	if err != nil {
		return false
	}

	chassisType := strings.TrimSpace(string(content))
	switch chassisType {
	case "8", "9", "10", "31":
		return true
	default:
		return false
	}
}

func supportsRuntimePM() bool {
	return fileExists("/run/nvidia_runtimepm_supported")
}

func enableRuntimePM() {
	fmt.Println("Writing", nvidiaRuntimePMFile)
	pmText := "options nvidia \"NVreg_DynamicPowerManagement=0x02\""

	if err := os.WriteFile(nvidiaRuntimePMFile, []byte(pmText), 0644); err != nil {
		log.Fatalf("Error writing to runtimepm file: %s", err)
	}
}

func disableRuntimePM() {
	unlinkIfExists(nvidiaRuntimePMFile)
}

func enableKMS() {
	value := 1
	kmsText := fmt.Sprintf(`# This file was generated by prime-switch
# Set value to 1 to enable modesetting
options nvidia-drm modeset=%d`, value)

	if err := os.WriteFile(nvidiaKMSFile, []byte(kmsText), 0644); err != nil {
		log.Fatalf("Error writing to KMS file: %s", err)
	}
}

func disableNvidia(keepNvidiaModules bool) {
	unlinkIfExists(blacklistFile)

	if !keepNvidiaModules {
		blacklistNvidia()
	}

	updateABRootInitramfs()
}

func blacklistNvidia() {
	blacklistText := `# Do not modify
# This file was generated by prime-switch
blacklist nvidia
blacklist nvidia-drm
blacklist nvidia-modeset
alias nvidia off
alias nvidia-drm off
alias nvidia-modeset off`

	if err := os.WriteFile(blacklistFile, []byte(blacklistText), 0644); err != nil {
		log.Fatalf("Error writing to blacklist file: %s", err)
	}
}

func fileExists(path string) bool {
	_, err := os.Stat(path)
	return !os.IsNotExist(err)
}
